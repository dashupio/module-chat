<chat-embed>
  <div class={ `row row-eq-height embed-${get('embed.data.type')}` }>
    <div if={ !props.embed.loading && get('embed.data.images.0.url') } class={ classes({ 'd-flex align-items-center' : true, 'col-md-4' : !props.inMessage || !state.show, 'col-12 mb-2' : state.show && props.inMessage }) }>
      <div class="embed text-center w-100">
        <div if={ !state.show || expanded.includes(get('embed.data.type')) } class="ratio ratio-16x9">
          <a href={ get('embed.data.url') } target="_blank" onclick={ (e) => expanded.includes(get('embed.data.type')) ? true : onShow(e) } class="rounded" style={ `background-image:url(${get('embed.data.images.0.url')}` } />
        </div>
        <div is="raw" if={ state.show && !expanded.includes(get('embed.data.type')) } class={ classes({ 'ratio ratio-16x9 rounded' : props.embed.data.html.includes('iframe') || props.embed.data.html.includes('video') }) } data={ { 'html' : props.embed.data.html } } />
      </div>
    </div>
    <div class={ classes({ 'd-flex align-items-center' : true, 'col-md-8' : get('embed.data.images.0.url'), 'col' : !get('embed.data.images.0.url') }) }>
      <div class="w-100 embed-title" if={ props.embed.loading }>
        <b>Loading...</b>
      </div>

      <div class="w-100" if={ !props.embed.loading }>
        <div class="embed-title text-overflow">
          <a href={ props.embed.data.url } target="_blank">
            <b class="d-block">{ props.embed.data.title }</b>
          </a>
        </div>
        <div class="embed-meta d-flex align-items-center">
          <a if={ props.embed.data.provider } href={ props.embed.data.provider.url } target="_blank" title={ props.embed.data.provider.name }>
            <img if={ props.embed.data.favicon } class="icon mr-2" src={ props.embed.data.favicon.url } />
          </a>
          <a if={ props.embed.data.provider } href={ props.embed.data.provider.url } target="_blank" title={ props.embed.data.provider.name }>
            { props.embed.data.provider.name }
          </a>
          <span class="sep mx-1" if={ get('embed.data.provider.name') && get('embed.data.author.name') }>|</span>
          <span if={ props.embed.data.author }>
            <a href={ props.embed.data.author.url } target="_blank">
              { props.embed.data.author.name }
            </a>
          </span>
          <span if={ props.embed.data.duration && !expanded.includes(get('embed.data.type')) }>
            { getDuration(props.embed.data.duration) }
          </span>
        </div>
      </div>
    </div>
  </div>

  <script>
    // require base class
    import uuid from 'uuid/v4';
    import moment from 'moment';
    import dotProp from 'dot-prop';

    // export default
    export default class ChatEmbed {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // expanded
        this.expanded = ['photo'];

        // photo
        this.state.show = this.expanded.includes(this.get('embed.data.type'));
      }

      /**
       * on toggle embed
       *
       * @param  {Event} e
       */
      onShow(e) {
        // prevent scroll
        e.preventDefault();
        e.stopPropagation();

        // check expanded
        if (this.expanded.includes(this.get('embed.data.type'))) {
          // open url
          return;
        }

        // toggle embed
        this.update({
          show : !this.state.show
        });
      }

      /**
       * get duration
       *
       * @param  {Number} time
       *
       * @return {String}
       */
      getDuration(time) {
        // return duration
        const duration = moment.duration(time * 100);

        // humanize
        return duration.humanize();
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * ref
       */
      get(key) {
        // get
        return dotProp.get(this.props, key);
      }

      /**
       * classes
       */
      classes(obj) {
        // return object
        return Object.keys(obj).filter((k) => obj[k]).join(' ');
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }

  </script>

  <style>
    .rounded {
      overflow : hidden;
    }
  </style>
</chat-embed>