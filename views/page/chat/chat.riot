<page-chat-chat>
  <div class={ getClass('chatContainer', 'dashup-chat-container') }>
    <div if={ state.show } class={ getClass('chatMain', 'dashup-chat card') }>
      <div class={ getClass('chatMainHeader', 'card-header bg-primary text-white') }>
        <b>
          { props.title || 'Questions? Chat with us!' }
        </b>
        <button class={ getClass('chatClose', 'btn btn-sm btn-primary ml-auto') } onclick={ () => hide() }>
          <i class={ getClass('chatCloseIcon', 'fa fa-times') } />
        </button>
      </div>
      <div class={ getClass('chatMainBody', 'card-body') } id="chat-body">

        <chat-message each={ (message, i) in getMessages() } message={ message } prev={ getMessages()[i - 1] } dashup={ dashup } page={ props.page } />

      </div>
      <div class={ getClass('chatMainFooter', 'card-footer d-flex flex-row') }>
        <div class="flex-1">
          <input class={ getClass('chatInput', 'form-control') } placeholder={ props.placeholder || 'Compose your message...' } onkeyup={ (e) => onKeyup(e) } />
        </div>
        <div class="flex-0 ml-2">
          <button class={ getClass('chatSend', 'btn btn-primary') } onclick={ (e) => onSend(e) }>
            <i class={ getClass('chatSendIcon', 'fa fa-paper-plane') } />
          </button>
        </div>
      </div>
    </div>
    <button class={ getClass('chatBubble', 'dashup-chat-bubble btn-primary') } onclick={ (e) => onToggle(e) }>
      <i class={ getClass('chatIcon', 'fa fa-comments') } />
    </button>
  </div>

  <script>
    // import components
    import chatMessage from './chat/message.riot';
    import PerfectScrollbar from 'perfect-scrollbar';

		// export default
    export default {
      components : {
        chatMessage,
      },

      onBeforeMount(props, state) {
        // initial state
        this.state = {
					ready   : true,
          error   : null,
          success : null,
          loading : false,
        };

        // show/hide
        this.show = this.show.bind(this);
        this.hide = this.hide.bind(this);

        // bind get methods
        this.getMessages = this.getMessages.bind(this);

        // set dashup
        this.dashup = props.dashup;

        // create safe update
        this.safeUpdate = () => {
          // update
          this.update();
        };

        // updates
        if (this.props.page.exists()) {
          // safe update
          this.props.page.chat.on('message', this.safeUpdate);
          this.props.page.chat.on('messages', this.safeUpdate);
        }
      },

      onMounted() {
        // create scrollbar
        if (this.$('#chat-body') && !this.$('#chat-body.ps')) {
          // create scrollbar
          new PerfectScrollbar(this.$('#chat-body'));

          // scroll down
          this.$('#chat-body').scrollTop = this.$('#chat-body').scrollHeight;
        }
      },

      onUpdated() {
        // create scrollbar
        if (this.$('#chat-body') && !this.$('#chat-body.ps')) {
          // create scrollbar
          new PerfectScrollbar(this.$('#chat-body'));
        }

        // scroll down
        if (this.$('#chat-body')) this.$('#chat-body').scrollTop = this.$('#chat-body').scrollHeight;
      },

      onBeforeUnmount() {

        // updates
        if (this.props.page.exists()) {
          // safe update
          this.props.page.chat.removeListener('message', this.safeUpdate);
          this.props.page.chat.removeListener('messages', this.safeUpdate);
        }
      },

      getClass(name, def) {
        // classes
        const classes = this.props.classes || {};
        
        // check name
        if (!classes[name]) return def;

        // return props
        return classes[name];
      },

      getMessages() {
        // get messages
        return (this.props.page.chat ? (this.props.page.chat.get('messages') || []) : []).sort((a, b) => {
          // sort order
          const aC = new Date(a.get('created_at') || 0);
          const bC = new Date(b.get('created_at') || 0);

          // check order
          if (bC > aC) return -1;
          if (bC < aC) return 1;
          return 0;
        });
      },

      onToggle(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // show/hide
        this[this.state.show ? 'hide' : 'show']();
      },

      onKeyup(e) {
        // check enter
        if (e.which == 13 && !e.shiftKey) {
          // return send
          this.onSend(e);
        }
      },

      onSend(e) {
        // send
        e.preventDefault();
        e.stopPropagation();

        // set message
        const message = this.$('input').value;
        this.$('input').value = '';

        // check length
        if (!message || !message.length || message.length < 3) return;

        // prevent
        this.props.page.send({
          message,
        });
      },

      async show() {
        // show
        this.update({
          show : true,
        });

        // check creating
        if (this.state.creating) return;

        // create
        if (!this.props.page.exists()) {
          // set creating
          this.update({
            creating : true,
          });
          
          // check
          await this.props.page.create();

          // updates
          if (this.props.page.exists()) {
            // safe update
            this.props.page.chat.on('message', this.safeUpdate);
            this.props.page.chat.on('messages', this.safeUpdate);
          }

          // set creating
          this.update({
            creating : false,
          });
        }
      },

      hide() {
        // show
        this.update({
          show : false,
        });
      }
    }

  </script>

  <style>
    .dashup-chat-bubble {
      right    : 1rem;
      width    : 3rem;
      bottom   : 1rem;
      height   : 3rem;
      border   : 0;
      padding  : 0;
      outline  : 0;
      z-index  : 100;
      position : fixed;

      text-align    : center;
      box-shadow    : 0 0.125rem 0.25rem rgba(0, 0, 0, .075);
      line-height   : 3rem;
      border-radius : 50%;

    }
    .dashup-chat {
      right      : 1rem;
      width      : 20rem;
      height     : 35rem;
      bottom     : 5rem;
      z-index    : 101;
      position   : fixed;
      box-shadow : 0 0.125rem 0.25rem rgba(0, 0, 0, .075);
    }
    #chat-body {
      position : relative;
    }
  </style>
</page-chat-chat>